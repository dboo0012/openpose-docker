# Multi-stage Dockerfile combining OpenPose and FastAPI backend
# Stage 1: Build OpenPose with CUDA 11.4 and Python 3.8
FROM nvidia/cuda:11.4.3-devel-ubuntu20.04 as openpose-builder

# Install dependencies for OpenPose
RUN apt-get update && \
    DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
    python3-dev python3-pip python3-setuptools git g++ wget make libprotobuf-dev protobuf-compiler libopencv-dev \
    libgoogle-glog-dev libboost-all-dev libhdf5-dev libatlas-base-dev && \
    rm -rf /var/lib/apt/lists/*

# Install Python dependencies for OpenPose
RUN pip3 install --upgrade pip
RUN pip3 install numpy opencv-python 

# Replace cmake as old version has CUDA variable bugs
RUN wget https://github.com/Kitware/CMake/releases/download/v3.16.0/cmake-3.16.0-Linux-x86_64.tar.gz && \
    tar xzf cmake-3.16.0-Linux-x86_64.tar.gz -C /opt && \
    rm cmake-3.16.0-Linux-x86_64.tar.gz
ENV PATH="/opt/cmake-3.16.0-Linux-x86_64/bin:${PATH}"

# Build OpenPose
WORKDIR /openpose
RUN git clone https://github.com/CMU-Perceptual-Computing-Lab/openpose.git .

# Copy models into place before building
COPY models /openpose/models

# Build OpenPose with Python bindings
WORKDIR /openpose/build
RUN cmake -DBUILD_PYTHON=ON -DUSE_CUDNN=OFF .. && make -j$(nproc)

# Stage 2: FastAPI backend with Python 3.11 and CUDA 12.1
FROM nvidia/cuda:12.1.0-devel-ubuntu22.04

# Install system dependencies (including OpenGL for OpenCV)
RUN apt-get update && \
    DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
    software-properties-common \
    curl \
    wget \
    git \
    build-essential \
    libglib2.0-0 \
    libsm6 \
    libxext6 \
    libxrender-dev \
    libgomp1 \
    libgoogle-glog-dev \
    libgl1-mesa-glx \
    libgtk-3-0 \
    libavcodec-dev \
    libavformat-dev \
    libswscale-dev \
    libv4l-dev \
    libxvidcore-dev \
    libx264-dev \
    libjpeg-dev \
    libpng-dev \
    libtiff-dev \
    libatlas-base-dev \
    libboost-all-dev \
    libhdf5-dev \
    libprotobuf-dev \
    protobuf-compiler \
    libopencv-dev \
    python3-tk && \
    rm -rf /var/lib/apt/lists/*

# Install Python 3.11
RUN add-apt-repository ppa:deadsnakes/ppa && \
    apt-get update && \
    DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
    python3.11 \
    python3.11-dev \
    python3.11-distutils \
    python3.11-venv && \
    rm -rf /var/lib/apt/lists/*

# Install pip for Python 3.11
RUN curl -sS https://bootstrap.pypa.io/get-pip.py | python3.11

# Set Python 3.11 as default
RUN update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.11 1
RUN update-alternatives --install /usr/bin/python python /usr/bin/python3.11 1

# Copy OpenPose built artifacts from previous stage
COPY --from=openpose-builder /openpose /openpose
COPY --from=openpose-builder /usr/local/cuda-11.4 /usr/local/cuda-11.4

# Set working directory for your backend
WORKDIR /app

# Copy backend requirements first for better caching
COPY sign2text-api/requirements.txt ./

# Install PyTorch with CUDA 12.1 support
RUN pip3 install torch torchvision --index-url https://download.pytorch.org/whl/cu121

# Install other Python dependencies
RUN pip3 install --no-cache-dir -r requirements.txt

# Copy your backend code
COPY sign2text-api/ .

# Set environment variables to use both CUDA versions
ENV PYTHONPATH="/app:/openpose/build/python"
ENV CUDA_HOME=/usr/local/cuda-12.1
ENV PATH="/usr/local/cuda-12.1/bin:/usr/local/cuda-11.4/bin:${PATH}"
ENV LD_LIBRARY_PATH="/usr/local/cuda-12.1/lib64:/usr/local/cuda-11.4/lib64:/openpose/build/src/openpose:${LD_LIBRARY_PATH}"

# Expose the port your FastAPI app runs on
EXPOSE 8000

# Command to run your FastAPI app
CMD ["fastapi", "dev", "main.py", "--host", "0.0.0.0", "--port", "8000"]
