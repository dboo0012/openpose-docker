# Multi-stage Dockerfile using a consistent CUDA 11.4 / Ubuntu 20.04 base
# Both stages will use the default Python 3.8

# =========================================================================================
# Stage 1: Build OpenPose with CUDA 11.4, cuDNN 8, and Python 3.8
# =========================================================================================
# MODIFIED: Switched to a base image that includes cuDNN 8, which is compatible with CUDA 11.4
FROM nvidia/cuda:11.4.3-cudnn8-devel-ubuntu20.04 as openpose-builder

ENV DEBIAN_FRONTEND=noninteractive

# Install dependencies for OpenPose, using the system's default python3 (3.8)
# No need to install cuDNN packages as they are included in the base image.
RUN apt-get update && apt-get install -y --no-install-recommends \
    git g++ wget make \
    python3-dev python3-pip python3-numpy \
    libprotobuf-dev protobuf-compiler libopencv-dev \
    libgoogle-glog-dev libboost-all-dev libhdf5-dev libatlas-base-dev && \
    rm -rf /var/lib/apt/lists/*

# Install Python dependencies for OpenPose build
RUN pip3 install --upgrade pip
RUN pip3 install numpy opencv-python

# Use a version of CMake compatible with this environment
RUN wget https://github.com/Kitware/CMake/releases/download/v3.18.0/cmake-3.18.0-Linux-x86_64.sh -O cmake.sh && \
    chmod +x cmake.sh && \
    ./cmake.sh --skip-license --prefix=/usr/local && \
    rm cmake.sh
ENV PATH="/usr/local/bin:${PATH}"

# Build OpenPose
WORKDIR /openpose
RUN git clone https://github.com/CMU-Perceptual-Computing-Lab/openpose.git .

# Copy models into place before building
COPY models /openpose/models

# Build OpenPose. CMake will auto-detect the system's python3.8
WORKDIR /openpose/build
# MODIFIED: Enabled the USE_CUDNN flag to build OpenPose with cuDNN support.
RUN cmake -DBUILD_PYTHON=ON -DUSE_CUDNN=ON -DCMAKE_CUDA_ARCHITECTURES=86 .. && \
    make -j$(nproc)

# =========================================================================================
# Stage 2: Final FastAPI backend with CUDA 11.4, cuDNN 8, and Python 3.8
# =========================================================================================
# MODIFIED: Switched to the corresponding cuDNN base image for the final stage.
# This ensures the necessary cuDNN runtime libraries are available.
FROM nvidia/cuda:11.4.3-cudnn8-devel-ubuntu20.04

ENV DEBIAN_FRONTEND=noninteractive

# Install runtime system dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    python3 python3-pip \
    libglib2.0-0 \
    libsm6 \
    libxext6 \
    libxrender-dev \
    libgl1-mesa-glx \
    libgoogle-glog-dev \
    libboost-all-dev libhdf5-dev libatlas-base-dev \
    libopencv-dev python3-opencv && \
    rm -rf /var/lib/apt/lists/*

# Copy OpenPose built artifacts from the builder stage
COPY --from=openpose-builder /openpose /openpose

# Set working directory for your backend
WORKDIR /app

# Copy backend requirements first for better caching
COPY sign2text-api/requirements.txt ./

# Pre-install the compatible version of networkx to prevent dependency conflict
RUN pip3 install networkx==3.1
RUN pip3 install sympy==1.12
RUN pip3 install fsspec==2023.12.2
RUN pip3 install typing-extensions==4.8.0
RUN pip3 install filelock==3.14.0

# Install PyTorch with CUDA 11.8 support (compatible with CUDA 11.4 runtime)
RUN pip3 install torch torchvision --index-url https://download.pytorch.org/whl/cu118

# Install other Python dependencies
RUN pip3 install --no-cache-dir -r requirements.txt

# Copy your backend code
COPY sign2text-api/ .

# Set environment variables
ENV PYTHONPATH="/app:/openpose/build/python:${PYTHONPATH}"
ENV LD_LIBRARY_PATH="/openpose/build/src/openpose:${LD_LIBRARY_PATH}"

# Expose the port your FastAPI app runs on
EXPOSE 8000

# Command to run your FastAPI app
CMD ["fastapi", "dev", "main.py", "--host", "0.0.0.0", "--port", "8000"]